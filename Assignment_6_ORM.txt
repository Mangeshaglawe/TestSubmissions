

create database ecommerce;
use ecommerce;

create table if not exists supplier
(
	SUPP_ID INT unsigned Primary Key auto_increment,
	SUPP_NAME varchar(50) NOT NULL,
	SUPP_CITY varchar(50) NOT NULL,
	SUPP_PHONE varchar(50) NOT NULL
);

/*drop table supplier
--drop table customer*/

create table if not exists customer
(
	CUS_ID INT unsigned Primary Key auto_increment,
	CUS_NAME VARCHAR(20) NOT NULL,
	CUS_PHONE VARCHAR(10) NOT NULL,
	CUS_CITY VARCHAR(30) NOT NULL,
	CUS_GENDER CHAR
);

create table if not exists category
(
	CAT_ID INT unsigned Primary Key auto_increment,
	CAT_NAME VARCHAR(20) NOT NULL
);

alter table category add column PARENT_CAT_ID INT unsigned,add foreign key(PARENT_CAT_ID) references category(CAT_ID);

create table if not exists product
(
PRO_ID INT unsigned auto_increment Primary Key,
PRO_NAME VARCHAR(20) NOT NULL DEFAULT("Dummy"),
PRO_DESC VARCHAR(60),
CAT_ID INT unsigned not null, 
constraint FK_CAT_ID foreign key(CAT_ID) references category(CAT_ID)
);

create table if not exists supplier_pricing
(
	PRICING_ID INT unsigned Primary Key auto_increment, 
	PRO_ID INT unsigned, constraint FK_PRO_ID foreign key(PRO_ID) references product(PRO_ID),
	SUPP_ID INT unsigned, constraint FK_SUPP_ID foreign key(SUPP_ID) references supplier(SUPP_ID),
	SUPP_PRICE INT unsigned DEFAULT 0
);


create table if not exists `order`
(
ORD_ID INT unsigned Primary Key,
ORD_AMOUNT INT unsigned NOT NULL,
ORD_DATE DATE NOT NULL,
CUS_ID INT unsigned , constraint FK_CUS_ID foreign key(CUS_ID) references customer(CUS_ID),
PRICING_ID INT unsigned ,constraint FK_PRICING_ID foreign key(PRICING_ID) references supplier_pricing(PRICING_ID)
)auto_increment=101;

create table if not exists `rating`
(
	
	RAT_ID INT unsigned Primary Key,
	ORD_ID INT unsigned, constraint FK_ORD_ID foreign key(ORD_ID) references `order`(ORD_ID),
	RAT_RATSTARS INT unsigned 	NOT NULL
);

INSERT INTO  supplier ( SUPP_NAME, SUPP_CITY, SUPP_PHONE) 
values
	("Rajesh Retails","Delhi", 1234567890),
	("Appario Ltd.","Mumbai", 2589631470),
	("Knome products","Banglore", 9785462315),
	("Bansal Retails","Kochi", 8975463285),
	("Mittal Ltd.", "Lucknow", 7898456532);


describe supplier;



insert into customer ( CUS_NAME, CUS_PHONE, CUS_CITY, CUS_GENDER) values
("AAKASH", "9999999999", "DELHI",   "M"),
("AMAN",	  "9785463215", "NOIDA",   "M"),
("NEHA",   "9999999999", "MUMBAI",  "F"),
("MEGHA",  "9994562399", "KOLKATA", "F"),
("PULKIT", "7895999999", "LUCKNOW", "M");

insert into category (CAT_NAME) values
("BOOKS"),
("GAMES"),
("GROCERIES"),
("ELECTRONICS"),
("CLOTHES");


insert into product ( PRO_NAME, PRO_DESC, CAT_ID) values
("GTA V" 					,"Windows 7 and above with i5 processor and 8GB RAM"	 		,2),
("TSHIRT" 					,"SIZE-L with Black, Blue and White variations" 				,5),
("ROG LAPTOP" 				,"Windows 10 with 15inch screen, i7 processor, 1TB SSD" 		,4),
("OATS" 						,"Highly Nutritious from Nestle" 								,3),
("HARRY POTTER" 				,"Best Collection of all time by J.K Rowling" 					,1),
("MILK" 						,"1L Toned MIlk" 												,3),
("Boat Earphones" 			,"1.5Meter long Dolby Atmos" 									,4),
("Jeans" 					,"Stretchable Denim Jeans with various sizes and color" 		,5),
("Project IGI" 				,"compatible with windows 7 and above" 							,2),
("Hoodie" 					,"Black GUCCI for 13 yrs and above" 							,5),
("Rich Dad Poor Dad"	 	,"Written by RObert Kiyosaki" 									,1),
("Train Your Brain" 		,"By Shireen Stephen" 											,1);

insert into supplier_pricing( PRO_ID, SUPP_ID, SUPP_PRICE) values
(6, 1, 1000),
(7, 2, 1200),
(8, 3, 1300),
(9, 4, 2000),
(10, 5, 1000),
(11, 4, 550),
(12, 5, 500),
(1, 2, 1500),
(3, 5, 30000),
(5, 1, 3000),
(2, 3, 2500),
(4, 1, 1000);

insert into `order` (ORD_ID, ORD_AMOUNT, ORD_DATE, CUS_ID, PRICING_ID) values
(101, 1500 	,"2021/10/06", 2, 1),
(102, 1000 	,"2021/10/12", 3, 5),
(103, 30000	,"2021/09/16", 5, 2),
(104, 1500 	,"2021/10/05", 1, 1),
(105, 3000 	,"2021/08/16", 4, 3),
(106, 1450 	,"2021/08/18", 1, 3),
(107, 789 	,"2021/09/01", 3, 2),
(108, 780 	,"2021/09/07", 5, 5),
(109, 3000 	,"2021/00/10", 5, 3),
(110, 2500 	,"2021/09/10", 2, 4),
(111, 1000 	,"2021/09/15", 4, 5),
(112, 789 	,"2021/09/16", 4, 1),
(113, 31000	,"2021/09/16", 1, 2),
(114, 1000 	,"2021/09/16", 3, 5),
(115, 3000 	,"2021/09/16", 5, 3),
(116, 99 	,"2021/09/17", 2, 4);

insert into rating (RAT_ID, ORD_ID, RAT_RATSTARS) values
(1 , 101, 4),
(2 , 102, 3),
(3 , 103, 1),
(4 , 104, 2),
(5 , 105, 4),
(6 , 106, 3),
(7 , 107, 4),
(8 , 108, 4),
(9 , 109, 3),
(10, 110, 5),
(11, 111, 3),
(12, 112, 4),
(13, 113, 2),
(14, 114, 1),
(15, 115, 1),
(16, 116, 0);

/*Write queries for the following:*/
/*3) Display the total number of customers based on gender who have placed orders of worth at least Rs.3000.*/
Select  count(*) AS cnt , CUS_GENDER AS gender from Customer a
JOIN `Order` b on a.CUS_ID = b.CUS_ID
Where ORD_AMOUNT >= 3000
group by CUS_GENDER;

/*4) Display all the orders along with product name ordered by a customer having Customer_Id=2*/
SELECT d.SUPP_NAME, e.PRO_NAME, c.PRICING_ID, a.ORD_ID, b.CUS_NAME
FROM `order` a
INNER JOIN customer b on a.CUS_ID = b.CUS_ID 
INNER JOIN supplier_pricing c on a.PRICING_ID = c.PRICING_ID
INNER JOIN supplier d on d.SUPP_ID = c.SUPP_ID
INNER JOIN product e on c.PRO_ID = e.PRO_ID
WHERE a.CUS_ID = 2;

/*5) Display the Supplier details who can supply more than one product.*/

SELECT s.SUPP_NAME, COUNT(p.PRO_NAME) AS product_count 
FROM supplier AS s 
INNER JOIN supplier_pricing AS sp ON s.SUPP_ID=sp.SUPP_ID
INNER JOIN product AS p ON p.PRO_ID=sp.PRO_ID 
GROUP BY s.SUPP_NAME 
HAVING COUNT(p.PRO_NAME) > 1;

/*6) Find the least expensive product from each category and print the table with category id, name, product name and price of the product*/
SELECT c.cat_ID,c.cat_name,pro_name,sp.PRO_ID, min(SUPP_PRICE)
FROM supplier_pricing sp
INNER JOIN product p  on sp.PRO_ID = p.PRO_ID
INNER JOIN category c  on c.cat_ID = p.cat_id
/*where c.cat_name = 'CLOTHES' */
GROUP BY  c.cat_name
HAVING min(SUPP_PRICE)
ORDER BY sp.PRO_ID;

/*7) Display the Id and Name of the Product ordered after “2021-10-05”.*/
SELECT p.PRO_ID,p.PRO_NAME
FROM supplier_pricing sp
INNER JOIN product p  on sp.PRO_ID = p.PRO_ID
INNER JOIN `Order` o on o.pricing_id = sp.pricing_id 
WHERE ORD_DATE > '2021-10-05';

/*8) Display customer name and gender whose names start or end with character 'A'.*/
SELECT CUS_NAME, CUS_GENDER FROM customer WHERE CUS_NAME LIKE "A%" OR CUS_NAME LIKE "%A";

/*9) Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, 
If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”.
*/
CREATE DEFINER=`root`@`localhost` PROCEDURE `getSupplierByRatings`()
BEGIN
SElect s.supp_id,supp_name,AVG(RAT_RATSTARS) as Rating,  
	case when  AVG(RAT_RATSTARS) =5 then 'Excellent Service'
	when  AVG(RAT_RATSTARS) =5 then 'Excellent Service'
	when  AVG(RAT_RATSTARS) >4 then 'Good Service'
	when  AVG(RAT_RATSTARS) >2 then 'Average Service'
	else 'Poor Service'  end AS type_of_service
	from Supplier s
	Inner JOIN supplier_pricing sp on s.supp_id = s.supp_id
	INNER JOIN `Order` o on o.pricing_id = sp.pricing_id 
	Inner JOIN rating r on r.ord_id = o.ord_id
	group by supp_name,r.ord_id
	order by s.supp_id;
END
use 
CALL getSupplierByRatings()



